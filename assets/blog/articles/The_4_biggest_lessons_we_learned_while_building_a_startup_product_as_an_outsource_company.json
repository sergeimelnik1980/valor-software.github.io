{
  "author": "Viktoria Prykhodko",
  "domains": [
    "sales_marketing",
    "recruitment_pm"
  ],
  "authorImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5e95749bd8501a80256ffab0_IMG_4576%20(1).JPG",
  "language": "en",
  "bgImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69ece22ec42f64a23725dc_art-13.png",
  "title": "The 4 biggest lessons we learned while building a startup product as an outsource company",
  "position": "Project Manager",
  "date": "Thu Sep 05 2019 11:09:46 GMT+0000 (Coordinated Universal Time)",
  "seoDescription": "Building a startup? We want to share four things we learned about managing a startup the hard way so you don't have to.",
  "content": "<div class=\"max-w-full\"> <p>Did you know that only one in 10 startups succeed? <a\n        href=\"https://s3.amazonaws.com/startupcompass-public/StartupGenomeReport2_Why_Startups_Fail_v2.pdf\">The\n    research by UC Berkeley &amp Stanford and other contributors</a> says that over 90% of startups fail within their\n    first three years. Those who succeed, still often come across near-death experience.<br></p> <p>There is no\n    \"magic pill\"to build a successful startup - you need to keep your finger on the pulse. We want to discuss a few\n    lessons from our successful experiences and past failures to help you increase chances of success. If you launch a\n    startup, lead it, or just work on it, this article will come in handy.<br></p> <p>All roads lead to\n    <s>Rome</s> project management. For the startup, having a project manager is essential: startups are about\n    the uncertainty and absence of long-term activities plan. Having a project manager who is very involved in a\n    project helps to decrease decision-making time and allows for quicker changes, both internally and\n    externally.&nbsp <br></p> <p>Poor planning at the start of a startup can lead to chaos, which is quite common for\n    a startup. For example, not understanding who your target audience is or developing plenty of fancy features that\n    don't solve users' problems.&nbsp <br></p> <p>When you understand what kind of project you have, you are a step\n    closer to its success. According to <a href=\" https://en.wikipedia.org/wiki/Cynefin_framework\">the Cynefin\n    framework</a>, a team's velocity is higher in complex and complicated projects than in chaos.&nbsp <br></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-center \">\n    <div><img\n            src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5d70ec55c5dc92ececbab582_YDoHhsL8jJs4yJ183udqYIxYeVFlyMtLgo9KHP5w3wZMMZuGuEvf9yy7Kqkoj_Sf68H3G3DYoqJ3Xe-d49LBv6I-t1ydWpxUPXlq4BxY2iuIqcFMPAsJ6Ih-VjJLwDKoBc5GPkAw.png\">\n    </div>\n    \n    <figcaption><a href=\"https://en.wikipedia.org/wiki/Cynefin_framework\"><em>The Cynefin framework</em></a><em>\n        provides a 'sense of place' from which to</em> <em>analyze which project management methodology should work\n        better for your project</em><br></figcaption>\n        </figure><p>We want to talk about four main lessons we learned which will help you drive your project from\n        chaos to complicated and complex, and therefore, manage it.</p> <h2>Lesson #1: Appoint a Product Owner</h2>\n     <p>The first lesson is related to a dedicated Agile role for managing requirements on the project - a Product\n        Owner:<br> </p> <p><em>The Product Owner is responsible for maximizing the value of the product resulting\n        from the work of the Development Team. How this is done may vary widely across organizations, Scrum Teams, and\n        individuals.</em></p> <p><em>The Product Owner is the sole person responsible for managing the Product\n        Backlog. Product Backlog management includes:</em></p>\n    <ul>\n        <li><em>Clearly expressing Product Backlog items </em></li>\n        \n        <li><em>Ordering the items in the Product Backlog to best achieve goals and missions </em></li>\n        \n        <li><em>Optimizing the value of the work the Development Team performs </em></li>\n        \n        <li><em>Ensuring that the Product Backlog is visible, transparent, and clear to all, and shows what the Scrum\n            Team will work on next and,</em></li>\n        \n        <li><em>Ensuring the Development Team understands items in the Product Backlog to the level needed. (c)\n            (</em><a href=\"https://www.scrumguides.org/scrum-guide.html#team-po\"><em>Scrum Guide</em></a><em>)</em>\n        </li>\n        \n    </ul>\n     <p>Product Backlog management can be decomposed into the following activities:<br><br></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-center \\\n    \">\n    <div><img\n            src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5d70ec55f504968a773a9d1c_wQV3zvuCMP-QZ72OuYpN6HM4TibMNwxnCiF2JRr9n8IBEe_WqxSdHspCs3MWKyqH8-X4QG4r2hNa3ZyZIBoR75uJDQUdiPCw9lMlvHDpKBrlXRqHDb4znUZJGIPzDO81CsL25ARE.png\">\n    </div>\n    \n    <figcaption><em>Well, so many tasks - this seems to be a full-time job!</em>&nbsp</figcaption>\n        </figure><p>Let's imagine there isn't a single person responsible for these activities. Is all the\n        information circulating between all the Product-related people? Aren't there delays in communicating essential\n        project specifications and updates? Does everyone on the Team know what, how, and in what order to do? Are the\n        stakeholders sure the developed Product will meet their expectations? You should have many doubts in mind if\n        you do want to keep track of the chaos that the project may bring.&nbsp <br></p> <p>We suggest you analyze\n        the situation on your project. Do you have the Product Owner on your project? Does this person carry out all\n        of the duties above? If you're uncertain about this, it's worth addressing one of the following options:<br>\n    </p>\n    <ul>\n        <li>Make sure a current Product Owner covers all the functions from above (if you have the Product Owner on\n            your end)\n        </li>\n        \n        <li>Ask the customer to hire the Product Owner, or, even better, <a\n                href=\"https://en.wikipedia.org/wiki/Subject-matter_expert\">domain expert (or subject-matter\n            expert)</a> and <a href=\"https://en.wikipedia.org/wiki/Business_analyst\">business analyst</a> in\n            addition\n        </li>\n        \n        <li>Delegate Product Owner responsibility to your organization and hire Product Owner in your company.<br></li>\n        \n    </ul>\n     <p>Ideally, the Product Owner should be a domain expert. In our case, we're working with a startup to create <a\n        href=\"https://app.renaizant.com/\">a web application to help HRs</a> and leadership keep up an organization's\n        health, so we've assigned our HR generalist to act as a domain expert. If hiring a domain expert isn't\n        possible, look for a person who is passionate about the Product and consult with this person.</p> <h2>Lesson\n        #2: Maintain documentation</h2> <p>Agile methodologies prioritize flexibility. However, <a\n            href=\"https://agilemanifesto.org/\">values of Agile</a> are rarely interpreted by the customer or Team in\n        the right way. One of them declares, \"Working software over comprehensive documentation.\"And of course,\n        nobody likes writing documentation.<br></p> <p>But does this mean that an Agile-based project doesn't need\n        documentation? We don't think so. The lack of documentation may work only if:<br></p>\n    <ul>\n        <li>The Product and its requirements are straightforward</li>\n        \n        <li>The business industry and its tendencies are predictable</li>\n        \n        <li>There are similar well-known solutions on the market</li>\n        \n        <li>The Project Team includes few people (let's say, 1-5).<br></li>\n        \n    </ul>\n     <p>The more the Product evolves, and the Team expands, the more miscommunication might occur. To reduce\n        miscommunication, you need to focus on the documentation to help you with:<br></p>\n    <ul>\n        <li>Being on the same page with the Team</li>\n        \n        <li>Employee onboarding</li>\n        \n        <li>Tracking different versions of product requirements.</li>\n        \n    </ul>\n     <h3>What documentation is needed for a startup?<br></h3> <p><strong>As a first step, draw up a product\n        vision:</strong><br></p>\n    <ul>\n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f1e86d5a38b568dd1f09_Persona%20canvas.pdf\"><strong>Persona\n                Canvas</strong></a> can be used to make it easier to step into the users' shoes and guide the\n            development of a product considering the users' needs, headaches, fears, opportunities, and hopes.\n        </li>\n        \n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f27c3f57a53cc866cdac_Empathy%20map%20canvas.pdf\"><strong>Empathy\n                Map Canvas</strong></a> is a tool that the Team can use to empathize with users' actions and thoughts\n            by mapping out what users say, do, see, hear, think, and feel.\n        </li>\n        \n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f27b6d5a386d86dd2a91_Business%20model.pdf\"><strong>Business\n                Model Canvas</strong></a> helps to develop new or document existing business models by specifying key\n            partners, key activities, key resources, value propositions, customer relationships, channels, customer\n            segments, cost structure, and revenue streams.\n        </li>\n        \n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f27b3f57a5bcbc66cdaa_Lean%20canvas.pdf\"><strong>Lean\n                Canvas</strong></a> will help you deconstruct your idea into its key assumptions: problem, existing\n            alternatives, solution, key metrics, unique value proposition, high-level concept, unfair advantage,\n            channels, customer segments, early adopters, cost structure, and revenue streams.\n        </li>\n        \n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f2a19b8d7b73508c0c22_Value%20proposition%20canvas.pdf\"><strong>Value\n                Proposition Canvas</strong></a> helps to identify your users' major jobs-to-be-done, the pains they\n            face when trying to accomplish jobs-to-be-done, the gains they feel by getting jobs done, and then define\n            the most important components of your proposition, how you relieve pain and create benefits for product\n            users.\n        </li>\n        \n        <li>\n            <a href=\"https://uploads-ssl.webflow.com/5c3f0ad89f55ca3a4f8c174c/5d70f27b6986a60366478c1e_Team%20canvas.pdf\"><strong>Team\n                Canvas</strong></a> a tool to reflect team people &amp roles, common goals, personal goals, purpose,\n            values, strength &amp assets, weakness &amp risks, needs &amp expectations, rules &amp activities.<br>\n        </li>\n        \n    </ul>\n     <p><strong>Collect product requirements and update them along the way:</strong><br></p>\n    <ul>\n        <li><strong>Site map</strong> is a list of pages of a product (application, web site).</li>\n        \n        <li><strong>User flows: </strong>deliverables (descriptions, prerequisites, wireframes) by features that\n            specify the complete paths that are followed across the Product to complete a task by various user\n            roles.\n        </li>\n        \n        <li><strong>Definition of Done</strong> is a set of conditions that must be met to mark a user story (one or\n            more product features) complete.\n        </li>\n        \n        <li><strong>Acceptance Criteria </strong>are conditions to consider a specific user story as done. As opposed\n            to Definition of Done, which is typical for all user stories, Acceptance Criteria are created individually\n            for various user stories.\n        </li>\n        \n        <li><strong>Non-functional requirements: </strong>criteria that can be used to judge the functioning of a\n            product, rather than specific behaviors, for example, attributes such as performance, security, usability,\n            compatibility.<br></li>\n        \n    </ul>\n     <p><strong>Throughout the project, maintain project onboarding docs:</strong><br></p>\n    <ul>\n        <li><strong>Product vision</strong> (described above) helps new Team members gain deeper insight into your\n            customer and product users\n        </li>\n        \n        <li><strong>Communication plan</strong> defines the general communication requirements for the project: who\n            should be given specific information, the timing, and the communication channels.\n        </li>\n        \n        <li><strong>Star map (also referred to as Skills matrix):</strong> a grid that visualizes the skills and\n            competence held by individuals within the Team.\n        </li>\n        \n        <li><strong>Responsibility assignment</strong>, usually presented by <a\n                href=\"https://en.wikipedia.org/wiki/Responsibility_assignment_matrix\">the RACI matrix</a>, describes\n            the roles and responsibilities for a project.\n        </li>\n        \n        <li><strong>Development process:</strong> the list of activities that are conducted to build up a product\n            (code is ready, tests are passed, features are documented, and so on).&nbsp\n        </li>\n        \n        <li><strong>Tools: </strong>the software the Team uses for a project (communication, development, testing,\n            etc.).&nbsp\n        </li>\n        \n        <li><strong>Environments: </strong>a computer system in which a product is deployed and executed. Usually,\n            those are development, staging, and production environments.\n        </li>\n        \n        <li><strong>Credentials:</strong> a list of accounts with access details or people who can give it.</li>\n        \n        <li><strong>Glossary </strong>defines the meaning of the terminology appearing in the project.<br></li>\n        \n    </ul>\n     <p>This list is just an example of the documentation kit: you may not use some of the suggested instruments, or\n        your list may be even larger in the end, as the project scales.</p> <h2>Lesson #3: Start from one killer\n        feature then work on \"nice to have\"features<br></h2> <p>We often see startup companies that are convinced\n        that their product can only work if it has the same Product complexity of a mature product such as Facebook\n        and tend to over-engineer their products by adding features that aren't necessary at the beginning.<br></p>\n    <p>From a practical point of view, more features mean more code produced. <a\n            href=\"https://s3.amazonaws.com/startupcompass-public/StartupGenomeReport2_Why_Startups_Fail_v2.pdf\">The\n        investigation by UC Berkeley &amp Stanford and other contributors</a> shows us that startups do keen to make\n        the Product overstuffed on the discovery stage:</p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-center \\\n    \">\n    <div><img\n            src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5d70ec55dc2d3b392dd943f4_pJ2v8MMK8OTVPX5BjMkjOtI2BFZWlS5CvR30cNW9tkinLTnJ_0fIBsRa-QSryfAylOCbd2O80s7CbwYSpPzmqyq5OmUpTbc_NttCYX_Q7zIaCarXadRAtMF5zKadxr5WTOGJ6rl8.png\">\n    </div>\n    \n    <figcaption><em>Lines of code written by stage</em></figcaption>\n        </figure><p>This leads us to another Agile pillar - incremental delivery. It makes sense to build and ship\n        an MVP - Minimum Viable Product - as soon as possible and expand the product feature by feature for the\n        following reasons:<br></p>\n    <ul>\n        <li>Verify if the Product has value and the potential of providing a benefit</li>\n        \n        <li>Time to market is crucial. Once released, the Product will already be in the public eye, perhaps the first\n            of its kind\n        </li>\n        \n        <li>Build solutions based on live feedback to adapt the development to user needs</li>\n        \n        <li>Complexity may lead to lower market adoption</li>\n        \n        <li>Start gaining an audience and monetizing the Product.<br></li>\n        \n    </ul>\n     <p>It doesn't matter if the Product isn't super fancy at the start and doesn't have many bells and whistles. In\n        the beginning, you can integrate ready-to-use solutions for basic functionality, and customize them or\n        develop alternative versions and broaden functionality later on - for example, re-use existing authorization\n        protocol, such as OAuth, instead of reinventing the wheel by creating a fancy new one.<br></p> <p>Despite\n        the benefits of a quick release, consider the importance of <strong>usability</strong> of the Product even in\n        the early stages of a project:<br></p>\n    <ul>\n        <li><strong>UX/UI (user experience &amp interface)</strong>: focus on how the Product works, how people\n            interact with it, and on the look &amp layout.&nbsp\n        </li>\n        \n        <li><strong>IA (information architecture): </strong>structure the design and information to be understandable\n            and consistent.\n        </li>\n        \n        <li><strong>QA (quality assurance): </strong>ensure the quality of the Product.<br></li>\n        \n    </ul>\n     <p>This way, you will win the loyalty of users and save time on rework in the future.</p> <h2>Lesson #4: Focus\n        on the Team<br></h2> <p>People who are proactive, have <a\n            href=\"https://medium.com/leadership-motivation-and-impact/fixed-v-growth-mindset-902e7d0081b3\">a growth\n        mindset</a>, are passionate about a project and personal growth, and have the required skills to convert the\n        Product Backlog into a Working Product, will be super productive in terms of startup work. In other words,\n        people's personal goals have to match startup goals as well. Let's address the <a\n                href=\"https://www.scrum.org/resources/scrum-guide\">Scrum Guide</a>'s definition of a successful\n        Team:<br></p> <p><em>The Development Team consists of professionals who do the work of delivering a\n        potentially releasable Increment of \"Done\"product at the end of each Sprint.</em><br></p> <p><em>Development\n        Teams have the following characteristics:</em></p>\n    <ul>\n        <li><em>They are self-organizing. No one (not even the Scrum Master) tells the Development Team how to turn\n            Product Backlog into Increments of potentially releasable functionality </em></li>\n        \n        <li><em>Development Teams are cross-functional, with all the skills as a team necessary to create a product\n            Increment </em></li>\n        \n        <li><em>Scrum recognizes no titles for Development Team members, regardless of the work being performed by the\n            person </em></li>\n        \n        <li><em>Scrum recognizes no sub-teams in the Development Team, regardless of domains that need to be addressed\n            like testing, architecture, operations, or business analysis and,</em></li>\n        \n        <li><em>Individual Development Team members may have specialized skills and areas of focus, but accountability\n            belongs to the Development Team as a whole</em><br></li>\n        \n    </ul>\n     <p>Besides matching the characteristics, work towards developing a set of conventional Team values. A great\n        example of values to rely on are the Scrum ones, which can be adjusted to reflect a state of mind of your\n        Team. We came to the following:<br></p>\n    <ul>\n        <li><strong>Commitment:</strong> We keep our promises to customers and set clear expectations on what, when,\n            and how to deliver. In case of uncertainty, it's always better to take some time for additional research\n            or negotiation.\n        </li>\n        \n        <li><strong>Courage: </strong>We dare to disagree or provide unpleasant news. Still, it's not only about being\n            truthful but also analyzing and correcting errors.\n        </li>\n        \n        <li><strong>Openness: </strong>We're open to changes - to adapt Product Backlog if some feature becomes\n            irrelevant, to learn new technology, etc.&nbsp\n        </li>\n        \n        <li><strong>Respect:</strong> We all come from different backgrounds and have different opinions but adapt to\n            each other and respect each other's boundaries.\n        </li>\n        \n        <li><strong>Focus</strong>: The Team is focused on a Sprint Goal and Sprint delivery. We don't spread\n            ourselves but follow the Sprint Backlog.<br></li>\n        \n    </ul>\n     <p>Behind the scenes, we have a couple of rules which improve our efficiency as an organization and Team inside\n        an organization:<br></p>\n    <ul>\n        <li><strong>30-minutes rule. </strong>If you're stuck on an issue for more than 15-30 minutes, stop, don't\n            waste time, and ask your colleagues.\n        </li>\n        \n        <li><strong>Culture of asking questions. </strong>Ask questions. Still, your question should contain 75% of\n            the answer - do your homework and research by yourself first. Consider that asking questions is a way to\n            receive a confirmation on your solution to solve some issues.&nbsp\n        </li>\n        \n        <li><strong>No micromanagement.</strong> Micromanaging is trying to closely control and monitor everything in\n            the Team, situation, or place. Micromanaged employees usually experience a lack of freedom in the\n            workplace.\n        </li>\n        \n        <li><strong>The ability to say \"No.\"</strong> Refusing at work is sometimes necessary. Some factors to\n            consider are your workload and personal life, the project in general, your values, and the deadline. On\n            the contrary, saying <strong>\"</strong>Yes<strong>\"</strong> deals with readiness to accept new\n            information, possibilities, and, the hardest one, criticism.\n        </li>\n        \n        <li><strong>The ability to apologize.</strong> There are countless ways to mess up at work. Acknowledging your\n            mistakes and apologizing can do a lot of good. Still, don't be over-apologizing - it can have an opposite\n            effect. You don't need to apologize for having a point of view, needing help, or just being human.\n        </li>\n        \n        <li><strong>Keep it simple.</strong> We share the idea that the right decision should be simple and\n            understandable for everyone. We don't strive to seem smarter using unnecessary bulky words or extra lines\n            of code and show rocket science we can deliver. The delivered solution should be simple, easy to\n            understand, and flexible to update or add new flows.\n        </li>\n        \n    </ul>\n     <h2>Conclusion</h2> <p>Handling a startup is about bringing order to chaos. If no processes are built at the\n        start, chances of success are slim to none. It's worth analyzing specifics of your project and domain in\n        advance to pick the right direction on how to manage your startup. For software projects, we recommend bending\n        the Agile and Scrum practices.&nbsp <br></p> <p>Having managed a startup for a year, we've drawn the\n        following lessons:<br></p>\n    <ol>\n        <li>A customer isn't always a carrier of product requirements and rarely can devote a lot of time for a\n            project. Assign a Product Owner or even break a Product Owner's role into two parts - <a\n                    href=\"https://en.wikipedia.org/wiki/Subject-matter_expert\">domain expert</a> and <a\n                    href=\"https://en.wikipedia.org/wiki/Business_analyst\">business analyst</a>.\n        </li>\n        \n        <li>Consider writing project documentation from the beginning of the project and our life hacks on the\n            necessary documents.\n        </li>\n        \n        <li>Build a little product, release it, learn something from your customer, adapt your vision, build a bit\n            more software, and create something better than you could have ever planned.\n        </li>\n        \n        <li>The Team should be priority number 1 because people who know what and how we should deliver as a Product\n            can work together as a cross-functional Team to provide any complex and complicated software.&nbsp <br>\n        </li>\n        \n    </ol>\n     <p>While working in a startup is a quite harsh experience, it gives you invaluable experience and lets you grow\n        faster than anywhere else. Besides, we got the double bonus - while developing a custom application for human\n        resource management, we improved our internal processes, automated a lot of manual managerial daily work,\n        increased employee engagement, and made a great effort in keeping employee performance and career growth stats\n        up to date.<br></p> <p>Another key to success in web development is to use the newest technological stack.\n        Above all, you get a modern and easily supported Product. Besides, your Team is motivated to upgrade skills\n        while learning something new, and this motivation helps strive for project success even more. In our case, the\n        startup application we have been working on is built and maintained with the help of Node.js v.10 + NestJS\n        v.6, Angular v.7-8, MySQL v.5 + MongoDB v.4, Cypress v.3, Docker, GCP API v.1, RxJs v.6, AI/ML.<br></p> <p>\n        The experience that we have gained and continue to gain while working on the project cannot be fit into one\n        article so that you do not fall asleep during its reading. But we want to continue to share our knowledge,\n        because, at the time of writing this article, we studied a massive amount of similar material, but,\n        unfortunately, in most cases it was far from reality and did not show how things go in real, active, and\n        living projects and what to do in specific situations.&nbsp <br></p> <p>See you in the next part!<br></p>\n</div>\n"
}